package _06_switch_fizzbuzz.constraints;

import _06_switch_fizzbuzz.predicates.*;
import de.heinerkuecker.constraint.util.exc.UnreachableCodeException;

/**
 * Constraint class of Integer.
 * <pre>(Fizz or not(Fizz) or Buzz or not(Buzz)).</pre>
 * Generated by {@link _06_switch_fizzbuzz.FizzBuzzConstraintCodeGenerator}.
 * Line-Number 123.
 */
public final class ORB_Fizz_NOT_Fizz_Buzz_NOT_Buzz_ORE
{
	/**
	 * Context object of type Integer.
	 */
	public final Integer value;

	/**
	 * Constructor.
	 * 
	 * @param value current context object
	 * @throws IllegalArgumentException if constraint violated
	 */
	public ORB_Fizz_NOT_Fizz_Buzz_NOT_Buzz_ORE(
			final Integer value )
	{
		if ( ! test( value ) )
		{
			throw new IllegalArgumentException( "constraint violation" );
		}
		this.value = value;
	}

	/**
	 * Test method.
	 * 
	 * @param value current context object
	 * @return constraint expression satisfied or not
	 */
	public static boolean test(
			final Integer value )
	{
		return ( new Fizz().test( value ) ||
					( ! new Fizz().test( value ) ) ||
					new Buzz().test( value ) ||
					( ! new Buzz().test( value ) ) );
	}

	/**
	 * Abstract class for constraint safe switch FizzBuzz
	 */
	abstract public class FizzBuzzSwitch
	{
		/**
		 * Abstract method for case (Fizz and not(Buzz))
		 * @param constraint specialized case constraint
		 */
		abstract protected void caseANDB_Fizz_NOT_Buzz_ANDE(
				final ANDB_Fizz_NOT_Buzz_ANDE constraint );

		/**
		 * Abstract method for case (Buzz and not(Fizz))
		 * @param constraint specialized case constraint
		 */
		abstract protected void caseANDB_Buzz_NOT_Fizz_ANDE(
				final ANDB_Buzz_NOT_Fizz_ANDE constraint );

		/**
		 * Abstract method for case (Fizz and Buzz)
		 * @param constraint specialized case constraint
		 */
		abstract protected void caseANDB_Fizz_Buzz_ANDE(
				final ANDB_Fizz_Buzz_ANDE constraint );

		/**
		 * Abstract method for case (not(Fizz) and not(Buzz))
		 * @param constraint specialized case constraint
		 */
		abstract protected void caseANDB_NOT_Fizz_NOT_Buzz_ANDE(
				final ANDB_NOT_Fizz_NOT_Buzz_ANDE constraint );

		/**
		 * Final do method for switch FizzBuzz
		 */
		public final void doSwitch()
		{
			if ( ANDB_Fizz_NOT_Buzz_ANDE.test( ORB_Fizz_NOT_Fizz_Buzz_NOT_Buzz_ORE.this.value ) )
			{
				caseANDB_Fizz_NOT_Buzz_ANDE(
						new ANDB_Fizz_NOT_Buzz_ANDE(
								ORB_Fizz_NOT_Fizz_Buzz_NOT_Buzz_ORE.this.value ) );
			}
			else if ( ANDB_Buzz_NOT_Fizz_ANDE.test( ORB_Fizz_NOT_Fizz_Buzz_NOT_Buzz_ORE.this.value ) )
			{
				caseANDB_Buzz_NOT_Fizz_ANDE(
						new ANDB_Buzz_NOT_Fizz_ANDE(
								ORB_Fizz_NOT_Fizz_Buzz_NOT_Buzz_ORE.this.value ) );
			}
			else if ( ANDB_Fizz_Buzz_ANDE.test( ORB_Fizz_NOT_Fizz_Buzz_NOT_Buzz_ORE.this.value ) )
			{
				caseANDB_Fizz_Buzz_ANDE(
						new ANDB_Fizz_Buzz_ANDE(
								ORB_Fizz_NOT_Fizz_Buzz_NOT_Buzz_ORE.this.value ) );
			}
			else if ( ANDB_NOT_Fizz_NOT_Buzz_ANDE.test( ORB_Fizz_NOT_Fizz_Buzz_NOT_Buzz_ORE.this.value ) )
			{
				caseANDB_NOT_Fizz_NOT_Buzz_ANDE(
						new ANDB_NOT_Fizz_NOT_Buzz_ANDE(
								ORB_Fizz_NOT_Fizz_Buzz_NOT_Buzz_ORE.this.value ) );
			}
			else
			{
				throw new UnreachableCodeException();
			}
		}

	}

	/**
	 * Debug output.
	 *
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString()
	{
		return "(Fizz or not(Fizz) or Buzz or not(Buzz)): " + this.value;	}

}