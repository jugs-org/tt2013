package _09_new_safeoperation_str_len.constraints;

import _09_new_safeoperation_str_len.predicates.*;

/**
 * Constraint class of String.
 * <pre>(StrMinLen10 and StrFirstUppercaseLetter and StrLastDigit).</pre>
 * Generated by {@link _09_new_safeoperation_str_len.NewSafeOperationStrLenConstraintCodeGenerator}.
 * Line-Number 94.
 */
public final class ANDB_StrMinLen10_StrFirstUppercaseLetter_StrLastDigit_ANDE
{
	/**
	 * Context object of type String.
	 */
	public final String str;

	/**
	 * Constructor.
	 * 
	 * @param str current context object
	 * @throws IllegalArgumentException if constraint violated
	 */
	public ANDB_StrMinLen10_StrFirstUppercaseLetter_StrLastDigit_ANDE(
			final String str )
	{
		if ( ! test( str ) )
		{
			throw new IllegalArgumentException( "constraint violation" );
		}
		this.str = str;
	}

	/**
	 * Test method.
	 * 
	 * @param str current context object
	 * @return constraint expression satisfied or not
	 */
	public static boolean test(
			final String str )
	{
		return ( new StrMinLen( 10 ).test( str ) &&
					new StrFirstUppercaseLetter().test( str ) &&
					new StrLastDigit().test( str ) );
	}

	/**
	 * Convert this constraint type to a compatible type of this type.
	 * <pre>StrMinLen5.</pre>
	 * 
	 * @return compatible type of this type
	 */
	public StrMinLen5 convertToStrMinLen5()
	{
		return new StrMinLen5(
				this.str );
	}

	/**
	 * Convert this constraint type to a compatible type of this type.
	 * <pre>StrIsNotNull.</pre>
	 * 
	 * @return compatible type of this type
	 */
	public StrIsNotNullConstraint convertToStrIsNotNullConstraint()
	{
		return new StrIsNotNullConstraint(
				this.str );
	}

	/**
	 * Convert this constraint type to a compatible type of this type.
	 * <pre>StrMinLen8.</pre>
	 * 
	 * @return compatible type of this type
	 */
	public StrMinLen8 convertToStrMinLen8()
	{
		return new StrMinLen8(
				this.str );
	}

	/**
	 * Convert this constraint type to a compatible type of this type.
	 * <pre>StrFirstUppercaseLetter.</pre>
	 * 
	 * @return compatible type of this type
	 */
	public StrFirstUppercaseLetterConstraint convertToStrFirstUppercaseLetterConstraint()
	{
		return new StrFirstUppercaseLetterConstraint(
				this.str );
	}

	/**
	 * Convert this constraint type to a compatible type of this type.
	 * <pre>StrMinLen10.</pre>
	 * 
	 * @return compatible type of this type
	 */
	public StrMinLen10 convertToStrMinLen10()
	{
		return new StrMinLen10(
				this.str );
	}

	/**
	 * Convert this constraint type to a compatible type of this type.
	 * <pre>StrMinLen1.</pre>
	 * 
	 * @return compatible type of this type
	 */
	public StrMinLen1 convertToStrMinLen1()
	{
		return new StrMinLen1(
				this.str );
	}

	/**
	 * Sichere Sub-String-Operation.
	 *
	 * @return constraintgesicherter Sub-String
	 */
	public StrExactLen5 substringFromZeroTo5()
	{
		return new StrExactLen5( str.substring( 0 , 5 ) );
	}

	/**
	 * Sichere Sub-String-Operation.
	 *
	 * @return constraintgesicherter Sub-String
	 */
	public StrExactLen5 substringFrom2To7()
	{
		return new StrExactLen5( str.substring( 2 , 7 ) );
	}

	/**
	 * Sichere Sub-String-Operation.
	 *
	 * @return constraintgesicherter Sub-String
	 */
	public StrMinLen8 substringFrom2ToEnd()
	{
		return new StrMinLen8( str.substring( 2 ) );
	}

	/**
	 * Sichere Sub-String-Operation.
	 *
	 * @return constraintgesicherter Sub-String
	 */
	public StrMinLen5 substringFromStartTo5()
	{
		return new StrMinLen5( str.substring( 0 , 5 ) );
	}

	/**
	 * Debug output.
	 *
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString()
	{
		return "(StrMinLen10 and StrFirstUppercaseLetter and StrLastDigit): " + this.str;
	}

}