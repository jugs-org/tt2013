package _11_transform_safeoperation_int_range.constraints;

import _11_transform_safeoperation_int_range.predicates.*;
import de.heinerkuecker.constraint.util.exc.UnreachableCodeException;

/**
 * Constraint class of Integer.
 * <pre>(IntGreaterZero or IntEqualZero).</pre>
 * Generated by {@link _11_transform_safeoperation_int_range.TransformSafeOperationIntRangeConstraintCodeGenerator}.
 * Line-Number 79.
 */
public final class ORB_IntGreaterZero_IntEqualZero_ORE
{
	/**
	 * Context object of type Integer.
	 */
	public final Integer value;

	/**
	 * Constructor.
	 * 
	 * @param value current context object
	 * @throws IllegalArgumentException if constraint violated
	 */
	public ORB_IntGreaterZero_IntEqualZero_ORE(
			final Integer value )
	{
		if ( ! test( value ) )
		{
			throw new IllegalArgumentException( "constraint violation" );
		}
		this.value = value;
	}

	/**
	 * Test method.
	 * 
	 * @param value current context object
	 * @return constraint expression satisfied or not
	 */
	public static boolean test(
			final Integer value )
	{
		return ( new IntGreater( 0 ).test( value ) ||
					new IntEqual( 0 ).test( value ) );
	}

	/**
	 * Abstract class for constraint safe switch EqualZeroGreaterZero
	 */
	abstract public class EqualZeroGreaterZeroSwitch
	{
		/**
		 * Abstract method for case IntEqualZero
		 * @param constraint specialized case constraint
		 */
		abstract protected void caseIntEqualZero(
				final IntEqualZero constraint );

		/**
		 * Abstract method for case IntGreaterZero
		 * @param constraint specialized case constraint
		 */
		abstract protected void caseIntGreaterZero(
				final IntGreaterZero constraint );

		/**
		 * Final do method for switch EqualZeroGreaterZero
		 */
		public final void doSwitch()
		{
			if ( IntEqualZero.test( ORB_IntGreaterZero_IntEqualZero_ORE.this.value ) )
			{
				caseIntEqualZero(
						new IntEqualZero(
								ORB_IntGreaterZero_IntEqualZero_ORE.this.value ) );
			}
			else if ( IntGreaterZero.test( ORB_IntGreaterZero_IntEqualZero_ORE.this.value ) )
			{
				caseIntGreaterZero(
						new IntGreaterZero(
								ORB_IntGreaterZero_IntEqualZero_ORE.this.value ) );
			}
			else
			{
				throw new UnreachableCodeException();
			}
		}

	}

	/**
	 * Sichere Int-Add-Operation.
	 *
	 * @return constraint-gesicherter Int-Wert
	 */
	public ORB_IntGreater1_IntEqual1_ORE add1()
	{
		return new ORB_IntGreater1_IntEqual1_ORE( Integer.valueOf( this.value.intValue() + 1 ) );
	}

	/**
	 * Debug output.
	 *
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString()
	{
		return "(IntGreaterZero or IntEqualZero): " + this.value;
	}

}