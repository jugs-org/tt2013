package _07_int_range.constraints;

import _07_int_range.predicates.*;
import de.heinerkuecker.constraint.util.exc.UnreachableCodeException;

/**
 * Constraint class of Integer.
 * <pre>(IntGreaterMinus10 and IntLesser10).</pre>
 * Generated by {@link _07_int_range.IntRangeConstraintCodeGenerator}.
 * Line-Number 79.
 */
public final class ANDB_IntGreaterMinus10_IntLesser10_ANDE
{
	/**
	 * Context object of type Integer.
	 */
	public final Integer value;

	/**
	 * Constructor.
	 * 
	 * @param value current context object
	 * @throws IllegalArgumentException if constraint violated
	 */
	public ANDB_IntGreaterMinus10_IntLesser10_ANDE(
			final Integer value )
	{
		if ( ! test( value ) )
		{
			throw new IllegalArgumentException( "constraint violation" );
		}
		this.value = value;
	}

	/**
	 * Test method.
	 * 
	 * @param value current context object
	 * @return constraint expression satisfied or not
	 */
	public static boolean test(
			final Integer value )
	{
		return ( new IntGreater( -10 ).test( value ) &&
					new IntLesser( 10 ).test( value ) );
	}

	/**
	 * Abstract class for constraint safe switch LesserZeroEqualZeroGreaterZero
	 */
	abstract public class LesserZeroEqualZeroGreaterZeroSwitch
	{
		/**
		 * Abstract method for case IntLesserZero
		 * @param constraint specialized case constraint
		 */
		abstract protected void caseIntLesserZero(
				final ANDB_IntGreaterMinus10_IntLesserZero_ANDE constraint );

		/**
		 * Abstract method for case IntEqualZero
		 * @param constraint specialized case constraint
		 */
		abstract protected void caseIntEqualZero(
				final IntEqualZero constraint );

		/**
		 * Abstract method for case IntGreaterZero
		 * @param constraint specialized case constraint
		 */
		abstract protected void caseIntGreaterZero(
				final ANDB_IntLesser10_IntGreaterZero_ANDE constraint );

		/**
		 * Final do method for switch LesserZeroEqualZeroGreaterZero
		 */
		public final void doSwitch()
		{
			if ( ANDB_IntGreaterMinus10_IntLesserZero_ANDE.test( ANDB_IntGreaterMinus10_IntLesser10_ANDE.this.value ) )
			{
				caseIntLesserZero(
						new ANDB_IntGreaterMinus10_IntLesserZero_ANDE(
								ANDB_IntGreaterMinus10_IntLesser10_ANDE.this.value ) );
			}
			else if ( IntEqualZero.test( ANDB_IntGreaterMinus10_IntLesser10_ANDE.this.value ) )
			{
				caseIntEqualZero(
						new IntEqualZero(
								ANDB_IntGreaterMinus10_IntLesser10_ANDE.this.value ) );
			}
			else if ( ANDB_IntLesser10_IntGreaterZero_ANDE.test( ANDB_IntGreaterMinus10_IntLesser10_ANDE.this.value ) )
			{
				caseIntGreaterZero(
						new ANDB_IntLesser10_IntGreaterZero_ANDE(
								ANDB_IntGreaterMinus10_IntLesser10_ANDE.this.value ) );
			}
			else
			{
				throw new UnreachableCodeException();
			}
		}

	}

	/**
	 * Debug output.
	 *
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString()
	{
		return "(IntGreaterMinus10 and IntLesser10): " + this.value;
	}

}